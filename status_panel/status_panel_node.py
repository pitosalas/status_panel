import rclpy
from rclpy.node import Node
from nav_msgs.msg import Odometry
from sensor_msgs.msg import BatteryState, LaserScan
from rclpy.qos import QoSProfile, QoSReliabilityPolicy
import time

import sys
import time
import status_panel.qwiic_micro_oled_lib


ok_screen_buffer = [
    # PAGE 0 (bytes 0-127): Top 8 rows - top of letters
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    
    # PAGE 1 (bytes 128-255): Rows 8-15 - Main body of "OK"
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    # Letter "O" - circular shape           # Letter "K" - vertical line with diagonals
    0x00, 0x00, 0x00, 0x00, 0xF0, 0xFC, 0xFE, 0xFF, 0xFF, 0x0F, 0x0F, 0xFF, 0xFF, 0xFE, 0xFC, 0xF0,
    0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x1C, 0x3E, 0x77, 0xE3, 0xC1, 0x80,
    0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x38, 0x7C, 0xEE, 0xC7, 0x83, 0x01,
    0x00, 0x00, 0x00, 0x00, 0x0F, 0x3F, 0x7F, 0xFF, 0xFF, 0xF0, 0xF0, 0xFF, 0xFF, 0x7F, 0x3F, 0x0F,
    
    # PAGE 2 (bytes 256-383): Rows 16-23 - Continue "OK"
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    
    # PAGE 3 (bytes 384-511): Bottom 8 rows
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
]
class StatusPanelNode(Node):
    def __init__(self):
        super().__init__('status_panel_node')

        # Create subscriptions
        self.create_subscription(Odometry, '/odom', self.odom_callback, 10)
        self.create_subscription(BatteryState, '/battery', self.batt_callback, 10)


        qos = QoSProfile(depth=10)
        qos.reliability = QoSReliabilityPolicy.BEST_EFFORT

        self.create_subscription(LaserScan, '/scan', self.scan_callback, qos)

        # State variables
        self.odom_msg_count = 0
        self.scan_msg_count = 0
        self.current_voltage = 0.0
        self.last_time = time.time()

        # Timer: fires at 1 Hz to calculate rates and call report_status
        self.create_timer(1.0, self.timer_callback)

        self.ole = self.prep_oled()

    def odom_callback(self, msg):
        self.odom_msg_count += 1

    def batt_callback(self, msg):
        self.current_voltage = float(msg.voltage)

    def scan_callback(self, msg):
        self.scan_msg_count += 1

    def timer_callback(self):
        now = time.time()
        elapsed = now - self.last_time
        odom_rate = self.odom_msg_count / elapsed if elapsed > 0 else 0.0
        scan_rate = self.scan_msg_count / elapsed if elapsed > 0 else 0.0

        # Reset counters and timer for the next interval
        self.last_time = now
        self.odom_msg_count = 0
        self.scan_msg_count = 0

        # Call your provided function with voltage, odom rate, and scan rate.
        # self.report_status(self.current_voltage, odom_rate, scan_rate)
        self.dislay_ok()

    def prep_oled(self):
        ole = status_panel.qwiic_micro_oled_lib.QwiicMicroOled(60)
        if not ole.connected:
            print("The Qwiic Micro OLED device isn't connected to the system. Please check your connection", \
                file=sys.stderr)
            return None
        ole.begin()
        ole.clear(ole.ALL)
        ole.clear(ole.PAGE)  # Clear the display's buffer
        return ole

    def report_status(self, volt, odom_rate, scan_rate):
        self.ole.set_cursor(0,0)
        self.ole.set_font_type(0)  # Set font type to 0 for the first line
        self.ole.print(f"VOLT: {volt:.2f}")
        self.ole.write('\n')  # New line
        self.ole.print(f"ODOM: {odom_rate:.2f}")
        self.ole.write('\n')  # New line
        self.ole.print(f"SCAN: {scan_rate:.2f}")
        self.ole.write('\n')  # New line
        self.ole.display()  # Write the buffer to the display       

    def dislay_ok(self):
        if self.ole:
            myOLED = self.ole
            # myOLED.begin()

            #  clear(ALL) will clear out the OLED's graphic memory.
            # myOLED.clear(myOLED.ALL) #  Clear the display's memory (gets rid of artifacts)

            # #  Display buffer contents
            # myOLED.display()
            # time.sleep(3)

            #  clear(PAGE) will clear the Arduino's display buffer.
            # myOLED.clear(myOLED.PAGE)  #  Clear the display's buffer

            #  Display buffer contents
            # myOLED.display()
            # time.sleep(3)

            print(f"bitmap supplied length is {len(ok_screen_buffer)}... screen buffer of chip is: {len(myOLED._screenbuffer)}")

            #  Draw Bitmap
            #  ---------------------------------------------------------------------------
            #  Add bitmap to buffer
            myOLED.draw_bitmap(ok_screen_buffer)

            #  To actually draw anything on the display, you must call the display() function.
            myOLED.display()

    def run(self):
        rclpy.spin(self)


def main(args=None):
    rclpy.init(args=args)
    node = StatusPanelNode()
    try:
        node.run()
    except KeyboardInterrupt:
        pass
    finally:
        node.destroy_node()
        rclpy.shutdown()


if __name__ == '__main__':
    main()